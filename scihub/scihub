#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Sci-API Unofficial API
[Search|Download] research papers from [scholar.google.com|sci-hub.io].

@author zaytoun
"""

import re
import argparse
import hashlib
import logging
import os

import requests
import urllib3
from bs4 import BeautifulSoup
from retrying import retry

from fake_useragent import UserAgent

from requests.exceptions import Timeout

# log config
logging.basicConfig()
logger = logging.getLogger('Sci-Hub')
logger.setLevel(logging.DEBUG)

#
urllib3.disable_warnings()
#
ua = UserAgent()

# constants
SCHOLARS_BASE_URL = 'https://scholar.google.com/scholar'
#HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:27.0) Gecko/20100101 Firefox/27.0'}
# random fake user agent
HEADERS = {'User-Agent': ua.random}
# simulate Tor Browser
#HEADERS = {
#    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
#    'Accept-Encoding': 'gzip, deflate',
#    'Accept-Language': 'en-US,en;q=0.5',
#    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0',
#    'Upgrade-Insecure-Requests': '1'
#}

class Article404Exception(Exception):
    pass

# Exception raised when we need to re-run fetch()
class FetchRetry(Exception):
    pass

class SciHub(object):
    """
    SciHub class can search for papers on Google Scholars 
    and fetch/download papers from sci-hub.io
    """

    def __init__(self):
        self.sess = requests.Session()
        self.sess.headers = HEADERS
        # Timeout for requests operation
        self.timeout = 15
        self.available_base_url_list = self._get_available_scihub_urls()
        self.base_url = self.available_base_url_list[0] + '/'

    def _get_available_scihub_urls(self):
        '''
        Finds available scihub urls via https://sci-hub.now.sh/
        '''
        urls = []
        res = requests.get('https://sci-hub.now.sh/', timeout=self.timeout)
        s = self._get_soup(res.content)
        for a in s.find_all('a', href=True):
            if 'sci-hub.' in a['href']:
                urls.append(a['href'])
        logger.debug('[_get_available_scihub_urls] urls=%s' % ';'.join(urls))
        return urls

    def set_proxy(self, proxy):
        '''
        set proxy for session
        :param proxy_dict:
        :return:
        '''
        if proxy:
            self.sess.proxies = {
                "http": proxy,
                "https": proxy 
                }

    def _change_base_url(self):
        if not self.available_base_url_list:
            raise Exception('Ran out of valid sci-hub urls')
        del self.available_base_url_list[0]
        self.base_url = self.available_base_url_list[0] + '/'
        logger.info("I'm changing to {}".format(self.available_base_url_list[0]))

    def search(self, query, limit=10, download=False):
        """
        Performs a query on scholar.google.com, and returns a dictionary
        of results in the form {'papers': ...}. Unfortunately, as of now,
        captchas can potentially prevent searches after a certain limit.
        """
        start = 0
        results = {'papers': []}

        while True:
            try:
                res = self.sess.get(SCHOLARS_BASE_URL, 
                                    params={'q': query, 'start': start},
                                    timeout=self.timeout)
            except requests.exceptions.RequestException as e:
                results['err'] = 'Failed to complete search with query %s (connection error)' % query
                return results

            s = self._get_soup(res.content)
            papers = s.find_all('div', class_="gs_r")

            if not papers:
                if 'CAPTCHA' in str(res.content):
                    results['err'] = 'Failed to complete search with query %s (captcha)' % query
                return results

            for paper in papers:
                if not paper.find('table'):
                    source = None
                    pdf = paper.find('div', class_='gs_ggs gs_fl')
                    link = paper.find('h3', class_='gs_rt')

                    if pdf:
                        source = pdf.find('a')['href']
                    elif link.find('a'):
                        source = link.find('a')['href']
                    else:
                        continue

                    results['papers'].append({
                        'name': link.text,
                        'url': source
                    })

                    if len(results['papers']) >= limit:
                        return results

            start += 10

    @retry(wait_random_min=100, wait_random_max=1000, stop_max_attempt_number=10)
    def download(self, identifier, destination='', path=None):
        """
        Downloads a paper from sci-hub given an indentifier (DOI, PMID, URL).
        Currently, this can potentially be blocked by a captcha if a certain
        limit has been reached.
        """
        while True:
            try:
                data = self.fetch(identifier)
            except FetchRetry:
                pass
            else:
                # code that executes when no exception occurs
                logger.info('[download] fetch did not raise any exceptions')
                break
        
        if data and not 'err' in data:
            logger.info('[download] Saving PDF file')
            self._save(data['pdf'],
                       os.path.join(destination, path if path else data['name']))

        return data

    def fetch(self, identifier):
        """
        Fetches the paper by first retrieving the direct link to the pdf.
        If the indentifier is a DOI, PMID, or URL pay-wall, then use Sci-Hub
        to access and download paper. Otherwise, just download paper directly.
        """

        try:
            url = self._get_direct_url(identifier)            
            logger.info('[fetch] url=%s' % url)
            
            if not url:
                # this sci-hub domain has been dismissed
                # change sci-hub domain
                logger.debug('[fetch] dismissed sci-hub domain\n')
                self._change_base_url()
                raise FetchRetry()
            
            # verify=False is dangerous but sci-hub.io 
            # requires intermediate certificates to verify
            # and requests doesn't know how to download them.
            # as a hacky fix, you can add them to your store
            # and verifying would work. will fix this later.
            res = self.sess.get(url, verify=False, timeout=self.timeout)                
            ctype = res.headers['Content-Type']
            logger.debug('Content-Type: %s' % ctype)
            
            #if "text/html" in ctype:
            #    logger.debug('HTML content:')
            #    logger.debug(res.content.decode("utf8"))
            
            if ctype != 'application/pdf':
                msg = '[fetch] Failed to fetch pdf with identifier %s ' \
                      '(resolved url %s) due to captcha' % (identifier, url)
                logger.info(msg)
                self._change_base_url()
                raise FetchRetry(msg)
                # return {
                #     'err': 'Failed to fetch pdf with identifier %s (resolved url %s) due to captcha'
                #            % (identifier, url)
                # }
            else:
                logger.info('[fetch] PDF retrieved')
                return {
                    'pdf': res.content,
                    'url': url,
                    'name': self._generate_name(res)
                }
                
        except Article404Exception:
            return {
                'err': 'Article not available in sci-hub'
            }

        except requests.exceptions.ConnectionError:
            # timed out connections are handled here
            msg = 'Cannot access {}, changing url\n'.format(self.available_base_url_list[0])
            logger.info(msg)
            self._change_base_url()
            raise FetchRetry(msg)

        except requests.exceptions.RequestException as e:
            msg = 'Failed to fetch pdf with identifier %s (resolved url %s) due to request exception.' \
                  % (identifier, url)
            logger.info(msg)
            return {
                'err': msg
            }

    def _get_direct_url(self, identifier):
        """
        Finds the direct source url for a given identifier.
        """
        id_type = self._classify(identifier)
        
        logger.info('[_get_direct_url] identifier: %s' % identifier)
        logger.info('[_get_direct_url] id_type: %s' % id_type)

        if id_type == 'url-direct':
            return identifier
        else:
            url = self._search_direct_url(identifier)
            logger.info('[_get_direct_url] url=%s' % url)
            return url

    def _search_direct_url(self, identifier):
        """
        Sci-Hub embeds papers in an iframe. This function finds the actual
        source url which looks something like https://moscow.sci-hub.io/.../....pdf.
        """
        url = self.base_url + identifier
        logger.debug("[_search_direct_url] url=%s" % url)
        try:
            res = self.sess.get(url, verify=False, timeout=self.timeout)
        except Exception as e:
            logger.debug('[_search_direct_url] Exception at self.sess.get')
            logger.debug(e)
            raise e
            
        cont = res.content.decode("utf8")
        
        if "sci-hub has not included this article yet" in cont:
            raise Article404Exception()
            
        #logger.debug('res.content=%s' % cont[:9950])
        
        s = self._get_soup(cont)
        
        # Try embedded iframe
        iframe = s.find('iframe')
        if iframe:
            logger.debug('iframe found')
            if not iframe.get('src').startswith('//'):
                return iframe.get('src')
            else:
                return 'http:' + iframe.get('src')
        else:
            logger.debug("iframe not found")
            
        # Try the following structure:
        # <div id="article">
        # <embed type="application/pdf" src="//index.ggws.net/downloads/2021-06-16/72/porcu2021.pdf#navpanes=0&view=FitH" id = "pdf"></embed>
        # </div>
        embed = s.find('embed')
        if embed:
            logger.debug('embed found')
            url = embed.get('src')
            pos = url.find("#")
            if pos > 0:
                url = url[0:pos]
            if not url.startswith('//'):
                return url
            else:
                return 'https:' + url
        else:
            logger.debug("embed not found")
            
        logger.error("ERROR: no direct URL for PDF was found")
        return None

    def _classify(self, identifier):
        """
        Classify the type of identifier:
        url-direct - openly accessible paper
        url-non-direct - pay-walled paper
        pmid - PubMed ID
        doi - digital object identifier
        """
        if (identifier.startswith('http') or identifier.startswith('https')):
            if identifier.endswith('pdf'):
                return 'url-direct'
            else:
                return 'url-non-direct'
        elif identifier.isdigit():
            return 'pmid'
        else:
            return 'doi'

    def _save(self, data, path):
        """
        Save a file give data and a path.
        """
        with open(path, 'wb') as f:
            f.write(data)

    def _get_soup(self, html):
        """
        Return html soup.
        """
        return BeautifulSoup(html, 'html.parser')

    def _generate_name(self, res):
        """
        Generate unique filename for paper. Returns a name by calcuating 
        md5 hash of file contents, then appending the last 20 characters
        of the url which typically provides a good paper identifier.
        """
        name = res.url.split('/')[-1]
        name = re.sub('#view=(.+)', '', name)
        pdf_hash = hashlib.md5(res.content).hexdigest()
        return '%s-%s' % (pdf_hash, name[-20:])

def main():
    sh = SciHub()

    parser = argparse.ArgumentParser(description='SciHub - To remove all barriers in the way of science.')
    parser.add_argument('-d', '--download', metavar='(DOI|PMID|URL)', help='tries to find and download the paper',
                        type=str)
    parser.add_argument('-f', '--file', metavar='path', help='pass file with list of identifiers and download each',
                        type=str)
    parser.add_argument('-s', '--search', metavar='query', help='search Google Scholars', type=str)
    parser.add_argument('-sd', '--search_download', metavar='query',
                        help='search Google Scholars and download if possible', type=str)
    parser.add_argument('-l', '--limit', metavar='N', help='the number of search results to limit to', default=10,
                        type=int)
    parser.add_argument('-o', '--output', metavar='path', help='directory to store papers', default='', type=str)
    parser.add_argument('-of', '--output-file', metavar='output_file', help='file name to save', default=None, type=str)
    parser.add_argument('-v', '--verbose', help='increase output verbosity', action='store_true')
    parser.add_argument('-p', '--proxy', help='via proxy format like socks5://user:pass@host:port', action='store', type=str)
    parser.add_argument('--timeout', help='timeout for requests operation', action='store', type=int, default=15)

    args = parser.parse_args()

    if args.verbose:
        logger.setLevel(logging.DEBUG)
    if args.proxy:
        sh.set_proxy(args.proxy)
        
    sh.timeout = args.timeout

    if args.download:
        result = sh.download(args.download, args.output, args.output_file)
        if not result:
            logger.debug('[main] Error: result is None')
        elif 'err' in result:
            logger.debug('%s', result['err'])
        else:
            logger.debug('Successfully downloaded file with identifier %s', args.download)
    elif args.search:
        results = sh.search(args.search, args.limit)
        if 'err' in results:
            logger.debug('%s', results['err'])
        else:
            logger.debug('Successfully completed search with query %s', args.search)
        print(results)
    elif args.search_download:
        results = sh.search(args.search_download, args.limit)
        if 'err' in results:
            logger.debug('%s', results['err'])
        else:
            logger.debug('Successfully completed search with query %s', args.search_download)
            for paper in results['papers']:
                result = sh.download(paper['url'], args.output)
                if 'err' in result:
                    logger.debug('%s', result['err'])
                else:
                    logger.debug('Successfully downloaded file with identifier %s', paper['url'])
    elif args.file:
        with open(args.file, 'r') as f:
            identifiers = f.read().splitlines()
            for identifier in identifiers:
                result = sh.download(identifier, args.output)
                if 'err' in result:
                    logger.debug('%s', result['err'])
                else:
                    logger.debug('Successfully downloaded file with identifier %s', identifier)


if __name__ == '__main__':
    main()
